//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TinySpline {

public class DeBoorNet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DeBoorNet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DeBoorNet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DeBoorNet() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tinysplinecsharpPINVOKE.delete_DeBoorNet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DeBoorNet(DeBoorNet other) : this(tinysplinecsharpPINVOKE.new_DeBoorNet(DeBoorNet.getCPtr(other)), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string ToString() {
    string ret = tinysplinecsharpPINVOKE.DeBoorNet_ToString(swigCPtr);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Knot {
    get {
      double ret = tinysplinecsharpPINVOKE.DeBoorNet_Knot_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint Index {
    get {
      uint ret = tinysplinecsharpPINVOKE.DeBoorNet_Index_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint Multiplicity {
    get {
      uint ret = tinysplinecsharpPINVOKE.DeBoorNet_Multiplicity_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint NumInsertions {
    get {
      uint ret = tinysplinecsharpPINVOKE.DeBoorNet_NumInsertions_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint Dimension {
    get {
      uint ret = tinysplinecsharpPINVOKE.DeBoorNet_Dimension_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public System.Collections.Generic.IList<double> Points {
    get {
      global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.DeBoorNet_Points_get(swigCPtr);
      RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public System.Collections.Generic.IList<double> Result {
    get {
      global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.DeBoorNet_Result_get(swigCPtr);
      RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
