/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_tinysplinecsharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_tinysplinecsharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_tinysplinecsharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


#include <stdio.h>


#define tinyspline_BSpline_degree_get(self_) self_->degree()
  

#define tinyspline_BSpline_order_get(self_) self_->order()
  

#define tinyspline_BSpline_dimension_get(self_) self_->dimension()
  

#define tinyspline_BSpline_numControlPoints_get(self_) self_->numControlPoints()
  

#define tinyspline_BSpline_domain_get(self_) new tinyspline::Domain(self_->domain())
  

#define tinyspline_BSpline_controlPoints_get(self_) new std::vector<tinyspline::real>(self_->controlPoints())
  

#define tinyspline_BSpline_controlPoints_set(self_, val_) self_->setControlPoints(*val_)
    

#define tinyspline_BSpline_knots_get(self_) new std::vector<tinyspline::real>(self_->knots())
  

#define tinyspline_BSpline_knots_set(self_, val_) self_->setKnots(*val_)
    

#define tinyspline_Domain_min_get(self_) self_->min()
  

#define tinyspline_Domain_max_get(self_) self_->max()
  

#define tinyspline_DeBoorNet_knot_get(self_) self_->knot()
  

#define tinyspline_DeBoorNet_index_get(self_) self_->index()
  

#define tinyspline_DeBoorNet_multiplicity_get(self_) self_->multiplicity()
  

#define tinyspline_DeBoorNet_numInsertions_get(self_) self_->numInsertions()
  

#define tinyspline_DeBoorNet_dimension_get(self_) self_->dimension()
  

#define tinyspline_DeBoorNet_points_get(self_) new std::vector<tinyspline::real>(self_->points())
  

#define tinyspline_DeBoorNet_result_get(self_) new std::vector<tinyspline::real>(self_->result())
  

#include <string>


	#include "tinyspline.h"
	#include "tinysplinecxx.h"


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< tinyspline::real > *new_std_vector_Sl_tinyspline_real_Sg___SWIG_2(int capacity){
        std::vector< double >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< double >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN double std_vector_Sl_tinyspline_real_Sg__getitemcopy(std::vector< tinyspline::real > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_tinyspline_real_Sg__getitem(std::vector< tinyspline::real > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__setitem(std::vector< tinyspline::real > *self,int index,double const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__AddRange(std::vector< tinyspline::real > *self,std::vector< double > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< double > *std_vector_Sl_tinyspline_real_Sg__GetRange(std::vector< tinyspline::real > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< double >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__Insert(std::vector< tinyspline::real > *self,int index,double const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__InsertRange(std::vector< tinyspline::real > *self,int index,std::vector< double > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__RemoveAt(std::vector< tinyspline::real > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__RemoveRange(std::vector< tinyspline::real > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< double > *std_vector_Sl_tinyspline_real_Sg__Repeat(double const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< double >(count, value);
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__Reverse__SWIG_0(std::vector< tinyspline::real > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__Reverse__SWIG_1(std::vector< tinyspline::real > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_tinyspline_real_Sg__SetRange(std::vector< tinyspline::real > *self,int index,std::vector< double > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_tinyspline_real_Sg__Contains(std::vector< tinyspline::real > *self,double const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_tinyspline_real_Sg__IndexOf(std::vector< tinyspline::real > *self,double const &value){
        int index = -1;
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_tinyspline_real_Sg__LastIndexOf(std::vector< tinyspline::real > *self,double const &value){
        int index = -1;
        std::vector< double >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_tinyspline_real_Sg__Remove(std::vector< tinyspline::real > *self,double const &value){
        std::vector< double >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_TS_MAX_NUM_KNOTS_get() {
  int jresult ;
  int result;
  
  result = (int)(10000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_TS_DOMAIN_DEFAULT_MIN_get() {
  double jresult ;
  double result;
  
  result = (double)(0.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_TS_DOMAIN_DEFAULT_MAX_get() {
  double jresult ;
  double result;
  
  result = (double)(1.0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_TS_KNOT_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(1e-4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_TS_CONTROL_POINT_EPSILON_get() {
  double jresult ;
  double result;
  
  result = (double)(1e-6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_degree(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_degree((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_degree(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_set_degree(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_order(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_order((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_order(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_set_order(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_dimension(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_dimension((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_dimension(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_set_dimension(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_len_control_points(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_len_control_points((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_num_control_points(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_num_control_points((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_sof_control_points(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_sof_control_points((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_control_points(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal **arg2 = (tsReal **) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal **)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_control_points((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_control_point_at(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal **arg3 = (tsReal **) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal **)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_control_point_at((tsBSpline const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_control_points(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal *arg2 = (tsReal *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_set_control_points(arg1,(double const *)arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_control_point_at(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal *arg3 = (tsReal *) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal *)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_set_control_point_at(arg1,arg2,(double const *)arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_num_knots(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_num_knots((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_bspline_sof_knots(void * jarg1) {
  unsigned long jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t result;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      result = ts_bspline_sof_knots((tsBSpline const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_knots(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal **arg2 = (tsReal **) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal **)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_knots((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_knot_at(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal *arg3 = (tsReal *) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal *)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_knot_at((tsBSpline const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_knots(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal *arg2 = (tsReal *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_set_knots(arg1,(double const *)arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_set_knot_at(void * jarg1, unsigned long jarg2, double jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_set_knot_at(arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_ts_deboornet_knot(void * jarg1) {
  double jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  tsReal result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = (tsReal)ts_deboornet_knot((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_index(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_index((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_multiplicity(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_multiplicity((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_num_insertions(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_num_insertions((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_dimension(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_dimension((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_len_points(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_len_points((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_num_points(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_num_points((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_sof_points(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_sof_points((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_deboornet_points(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  tsReal **arg2 = (tsReal **) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  arg2 = (tsReal **)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_deboornet_points((tsDeBoorNet const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_len_result(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_len_result((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_num_result(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_num_result((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_ts_deboornet_sof_result(void * jarg1) {
  unsigned long jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      result = ts_deboornet_sof_result((tsDeBoorNet const *)arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_deboornet_result(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  tsReal **arg2 = (tsReal **) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  arg2 = (tsReal **)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_deboornet_result((tsDeBoorNet const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_ts_bspline_init() {
  void * jresult ;
  tsBSpline result;
  
  {
    try {
      result = ts_bspline_init();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tsBSpline((const tsBSpline &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_new(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, int jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  tsBSplineType arg4 ;
  tsBSpline *arg5 = (tsBSpline *) 0 ;
  tsStatus *arg6 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tsBSplineType)jarg4; 
  arg5 = (tsBSpline *)jarg5; 
  arg6 = (tsStatus *)jarg6; 
  {
    try {
      result = (tsError)ts_bspline_new(arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_copy(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsBSpline *arg2 = (tsBSpline *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsBSpline *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_copy((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_bspline_move(void * jarg1, void * jarg2) {
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsBSpline *arg2 = (tsBSpline *) 0 ;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsBSpline *)jarg2; 
  {
    try {
      ts_bspline_move(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_bspline_free(void * jarg1) {
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  
  arg1 = (tsBSpline *)jarg1; 
  {
    try {
      ts_bspline_free(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_ts_deboornet_init() {
  void * jresult ;
  tsDeBoorNet result;
  
  {
    try {
      result = ts_deboornet_init();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tsDeBoorNet((const tsDeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_deboornet_copy(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  tsDeBoorNet *arg2 = (tsDeBoorNet *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  arg2 = (tsDeBoorNet *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_deboornet_copy((tsDeBoorNet const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_deboornet_move(void * jarg1, void * jarg2) {
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  tsDeBoorNet *arg2 = (tsDeBoorNet *) 0 ;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  arg2 = (tsDeBoorNet *)jarg2; 
  {
    try {
      ts_deboornet_move(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_deboornet_free(void * jarg1) {
  tsDeBoorNet *arg1 = (tsDeBoorNet *) 0 ;
  
  arg1 = (tsDeBoorNet *)jarg1; 
  {
    try {
      ts_deboornet_free(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_interpolate_cubic_natural(void * jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  tsReal *arg1 = (tsReal *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  tsBSpline *arg4 = (tsBSpline *) 0 ;
  tsStatus *arg5 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsReal *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tsBSpline *)jarg4; 
  arg5 = (tsStatus *)jarg5; 
  {
    try {
      result = (tsError)ts_bspline_interpolate_cubic_natural((double const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_interpolate_catmull_rom(void * jarg1, unsigned long jarg2, unsigned long jarg3, double jarg4, void * jarg5, void * jarg6, double jarg7, void * jarg8, void * jarg9) {
  int jresult ;
  tsReal *arg1 = (tsReal *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  tsReal arg4 ;
  tsReal *arg5 = (tsReal *) 0 ;
  tsReal *arg6 = (tsReal *) 0 ;
  tsReal arg7 ;
  tsBSpline *arg8 = (tsBSpline *) 0 ;
  tsStatus *arg9 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsReal *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tsReal)jarg4; 
  arg5 = (tsReal *)jarg5; 
  arg6 = (tsReal *)jarg6; 
  arg7 = (tsReal)jarg7; 
  arg8 = (tsBSpline *)jarg8; 
  arg9 = (tsStatus *)jarg9; 
  {
    try {
      result = (tsError)ts_bspline_interpolate_catmull_rom((double const *)arg1,arg2,arg3,arg4,(double const *)arg5,(double const *)arg6,arg7,arg8,arg9);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_eval(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  tsDeBoorNet *arg3 = (tsDeBoorNet *) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (tsDeBoorNet *)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_eval((tsBSpline const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_eval_all(void * jarg1, void * jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal *arg2 = (tsReal *) 0 ;
  size_t arg3 ;
  tsReal **arg4 = (tsReal **) 0 ;
  tsStatus *arg5 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tsReal **)jarg4; 
  arg5 = (tsStatus *)jarg5; 
  {
    try {
      result = (tsError)ts_bspline_eval_all((tsBSpline const *)arg1,(double const *)arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_sample(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal **arg3 = (tsReal **) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  tsStatus *arg5 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal **)jarg3; 
  arg4 = (size_t *)jarg4; 
  arg5 = (tsStatus *)jarg5; 
  {
    try {
      result = (tsError)ts_bspline_sample((tsBSpline const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_bisect(void * jarg1, double jarg2, double jarg3, int jarg4, unsigned long jarg5, int jarg6, unsigned long jarg7, void * jarg8, void * jarg9) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  tsReal arg3 ;
  int arg4 ;
  size_t arg5 ;
  int arg6 ;
  size_t arg7 ;
  tsDeBoorNet *arg8 = (tsDeBoorNet *) 0 ;
  tsStatus *arg9 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (size_t)jarg7; 
  arg8 = (tsDeBoorNet *)jarg8; 
  arg9 = (tsStatus *)jarg9; 
  {
    try {
      result = (tsError)ts_bspline_bisect((tsBSpline const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_bspline_domain(void * jarg1, void * jarg2, void * jarg3) {
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal *arg2 = (tsReal *) 0 ;
  tsReal *arg3 = (tsReal *) 0 ;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal *)jarg2; 
  arg3 = (tsReal *)jarg3; 
  {
    try {
      ts_bspline_domain((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_is_closed(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  int *arg3 = (int *) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_is_closed((tsBSpline const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_derive(void * jarg1, unsigned long jarg2, double jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  tsBSpline *arg4 = (tsBSpline *) 0 ;
  tsStatus *arg5 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (tsBSpline *)jarg4; 
  arg5 = (tsStatus *)jarg5; 
  {
    try {
      result = (tsError)ts_bspline_derive((tsBSpline const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_insert_knot(void * jarg1, double jarg2, unsigned long jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  size_t arg3 ;
  tsBSpline *arg4 = (tsBSpline *) 0 ;
  size_t *arg5 = (size_t *) 0 ;
  tsStatus *arg6 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tsBSpline *)jarg4; 
  arg5 = (size_t *)jarg5; 
  arg6 = (tsStatus *)jarg6; 
  {
    try {
      result = (tsError)ts_bspline_insert_knot((tsBSpline const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_split(void * jarg1, double jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  tsBSpline *arg3 = (tsBSpline *) 0 ;
  size_t *arg4 = (size_t *) 0 ;
  tsStatus *arg5 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (tsBSpline *)jarg3; 
  arg4 = (size_t *)jarg4; 
  arg5 = (tsStatus *)jarg5; 
  {
    try {
      result = (tsError)ts_bspline_split((tsBSpline const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_tension(void * jarg1, double jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsReal arg2 ;
  tsBSpline *arg3 = (tsBSpline *) 0 ;
  tsStatus *arg4 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsReal)jarg2; 
  arg3 = (tsBSpline *)jarg3; 
  arg4 = (tsStatus *)jarg4; 
  {
    try {
      result = (tsError)ts_bspline_tension((tsBSpline const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_to_beziers(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  tsBSpline *arg2 = (tsBSpline *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (tsBSpline *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_to_beziers((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_to_json(void * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  char **arg2 = (char **) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (char **)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_to_json((tsBSpline const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_from_json(char * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  tsBSpline *arg2 = (tsBSpline *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (char *)jarg1; 
  arg2 = (tsBSpline *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_from_json((char const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_save(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tsBSpline *arg1 = (tsBSpline *) 0 ;
  char *arg2 = (char *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (tsBSpline *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_save((tsBSpline const *)arg1,(char const *)arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_bspline_load(char * jarg1, void * jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  tsBSpline *arg2 = (tsBSpline *) 0 ;
  tsStatus *arg3 = (tsStatus *) 0 ;
  tsError result;
  
  arg1 = (char *)jarg1; 
  arg2 = (tsBSpline *)jarg2; 
  arg3 = (tsStatus *)jarg3; 
  {
    try {
      result = (tsError)ts_bspline_load((char const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_ts_knots_equal(double jarg1, double jarg2) {
  int jresult ;
  tsReal arg1 ;
  tsReal arg2 ;
  int result;
  
  arg1 = (tsReal)jarg1; 
  arg2 = (tsReal)jarg2; 
  {
    try {
      result = (int)ts_knots_equal(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_ts_arr_fill(void * jarg1, unsigned long jarg2, double jarg3) {
  tsReal *arg1 = (tsReal *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  
  arg1 = (tsReal *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  {
    try {
      ts_arr_fill(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_ts_distance(void * jarg1, void * jarg2, unsigned long jarg3) {
  double jresult ;
  tsReal *arg1 = (tsReal *) 0 ;
  tsReal *arg2 = (tsReal *) 0 ;
  size_t arg3 ;
  tsReal result;
  
  arg1 = (tsReal *)jarg1; 
  arg2 = (tsReal *)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (tsReal)ts_distance((double const *)arg1,(double const *)arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_DeBoorNet(void * jarg1) {
  void * jresult ;
  tinyspline::DeBoorNet *arg1 = 0 ;
  tinyspline::DeBoorNet *result = 0 ;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyspline::DeBoorNet const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (tinyspline::DeBoorNet *)new tinyspline::DeBoorNet((tinyspline::DeBoorNet const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_delete_DeBoorNet(void * jarg1) {
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TinySpline_DeBoorNet_ToString(void * jarg1) {
  char * jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  std::string result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = ((tinyspline::DeBoorNet const *)arg1)->toString();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Knot_get(void * jarg1) {
  double jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  tinyspline::real result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = (tinyspline::real)tinyspline_DeBoorNet_knot_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Index_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = tinyspline_DeBoorNet_index_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Multiplicity_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = tinyspline_DeBoorNet_multiplicity_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_DeBoorNet_NumInsertions_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = tinyspline_DeBoorNet_numInsertions_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Dimension_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = tinyspline_DeBoorNet_dimension_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Points_get(void * jarg1) {
  void * jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = (std::vector< tinyspline::real > *)tinyspline_DeBoorNet_points_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_DeBoorNet_Result_get(void * jarg1) {
  void * jresult ;
  tinyspline::DeBoorNet *arg1 = (tinyspline::DeBoorNet *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::DeBoorNet *)jarg1; 
  {
    try {
      result = (std::vector< tinyspline::real > *)tinyspline_DeBoorNet_result_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_Domain__SWIG_0(double jarg1, double jarg2) {
  void * jresult ;
  tsReal arg1 ;
  tsReal arg2 ;
  tinyspline::Domain *result = 0 ;
  
  arg1 = (tsReal)jarg1; 
  arg2 = (tsReal)jarg2; 
  {
    try {
      result = (tinyspline::Domain *)new tinyspline::Domain(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_Domain__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyspline::Domain *arg1 = 0 ;
  tinyspline::Domain *result = 0 ;
  
  arg1 = (tinyspline::Domain *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyspline::Domain const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (tinyspline::Domain *)new tinyspline::Domain((tinyspline::Domain const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TinySpline_Domain_ToString(void * jarg1) {
  char * jresult ;
  tinyspline::Domain *arg1 = (tinyspline::Domain *) 0 ;
  std::string result;
  
  arg1 = (tinyspline::Domain *)jarg1; 
  {
    try {
      result = ((tinyspline::Domain const *)arg1)->toString();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_Domain_Min_get(void * jarg1) {
  double jresult ;
  tinyspline::Domain *arg1 = (tinyspline::Domain *) 0 ;
  tinyspline::real result;
  
  arg1 = (tinyspline::Domain *)jarg1; 
  {
    try {
      result = (tinyspline::real)tinyspline_Domain_min_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_Domain_Max_get(void * jarg1) {
  double jresult ;
  tinyspline::Domain *arg1 = (tinyspline::Domain *) 0 ;
  tinyspline::real result;
  
  arg1 = (tinyspline::Domain *)jarg1; 
  {
    try {
      result = (tinyspline::real)tinyspline_Domain_max_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_delete_Domain(void * jarg1) {
  tinyspline::Domain *arg1 = (tinyspline::Domain *) 0 ;
  
  arg1 = (tinyspline::Domain *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_0() {
  void * jresult ;
  tinyspline::BSpline *result = 0 ;
  
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = 0 ;
  tinyspline::BSpline *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyspline::BSpline const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline((tinyspline::BSpline const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_2(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3, int jarg4) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  tinyspline::BSpline::type arg4 ;
  tinyspline::BSpline *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (tinyspline::BSpline::type)jarg4; 
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline(arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_3(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  size_t arg3 ;
  tinyspline::BSpline *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline(arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_4(unsigned long jarg1, unsigned long jarg2) {
  void * jresult ;
  size_t arg1 ;
  size_t arg2 ;
  tinyspline::BSpline *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_BSpline__SWIG_5(unsigned long jarg1) {
  void * jresult ;
  size_t arg1 ;
  tinyspline::BSpline *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (tinyspline::BSpline *)new tinyspline::BSpline(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_delete_BSpline(void * jarg1) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCubicNatural(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = tinyspline::BSpline::interpolateCubicNatural((std::vector< double > const *)arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCatmullRom__SWIG_0(void * jarg1, unsigned long jarg2, double jarg3, void * jarg4, void * jarg5, double jarg6) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  std::vector< tinyspline::real > *arg4 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< tinyspline::real > *arg5 = (std::vector< tinyspline::real > *) 0 ;
  tsReal arg6 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (std::vector< tinyspline::real > *)jarg4; 
  arg5 = (std::vector< tinyspline::real > *)jarg5; 
  arg6 = (tsReal)jarg6; 
  {
    try {
      result = tinyspline::BSpline::interpolateCatmullRom((std::vector< double > const *)arg1,arg2,arg3,arg4,arg5,arg6);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCatmullRom__SWIG_1(void * jarg1, unsigned long jarg2, double jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  std::vector< tinyspline::real > *arg4 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< tinyspline::real > *arg5 = (std::vector< tinyspline::real > *) 0 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (std::vector< tinyspline::real > *)jarg4; 
  arg5 = (std::vector< tinyspline::real > *)jarg5; 
  {
    try {
      result = tinyspline::BSpline::interpolateCatmullRom((std::vector< double > const *)arg1,arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCatmullRom__SWIG_2(void * jarg1, unsigned long jarg2, double jarg3, void * jarg4) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  std::vector< tinyspline::real > *arg4 = (std::vector< tinyspline::real > *) 0 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  arg4 = (std::vector< tinyspline::real > *)jarg4; 
  {
    try {
      result = tinyspline::BSpline::interpolateCatmullRom((std::vector< double > const *)arg1,arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCatmullRom__SWIG_3(void * jarg1, unsigned long jarg2, double jarg3) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tsReal arg3 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tsReal)jarg3; 
  {
    try {
      result = tinyspline::BSpline::interpolateCatmullRom((std::vector< double > const *)arg1,arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InterpolateCatmullRom__SWIG_4(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  size_t arg2 ;
  tinyspline::BSpline result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = tinyspline::BSpline::interpolateCatmullRom((std::vector< double > const *)arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_FromJson(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  tinyspline::BSpline result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  {
    try {
      result = tinyspline::BSpline::fromJson(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Load(char * jarg1) {
  void * jresult ;
  std::string arg1 ;
  tinyspline::BSpline result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg1)->assign(jarg1); 
  {
    try {
      result = tinyspline::BSpline::load(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_ControlPointAt(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::vector< tinyspline::real > *)((tinyspline::BSpline const *)arg1)->controlPointAt(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_BSpline_KnotAt(void * jarg1, unsigned long jarg2) {
  double jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  tinyspline::real result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (tinyspline::real)((tinyspline::BSpline const *)arg1)->knotAt(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Eval(void * jarg1, double jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->eval(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_EvalAll(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *arg2 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (std::vector< tinyspline::real > *)jarg2; 
  {
    try {
      result = (std::vector< tinyspline::real > *)((tinyspline::BSpline const *)arg1)->evalAll((std::vector< tinyspline::real > const *)arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Sample__SWIG_0(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (std::vector< tinyspline::real > *)((tinyspline::BSpline const *)arg1)->sample(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Sample__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = (std::vector< tinyspline::real > *)((tinyspline::BSpline const *)arg1)->sample();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_0(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned long jarg5, unsigned int jarg6, unsigned long jarg7) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::real arg3 ;
  bool arg4 ;
  size_t arg5 ;
  bool arg6 ;
  size_t arg7 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (size_t)jarg7; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2,arg3,arg4,arg5,arg6,arg7);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_1(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned long jarg5, unsigned int jarg6) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::real arg3 ;
  bool arg4 ;
  size_t arg5 ;
  bool arg6 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (size_t)jarg5; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2,arg3,arg4,arg5,arg6);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_2(void * jarg1, double jarg2, double jarg3, unsigned int jarg4, unsigned long jarg5) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::real arg3 ;
  bool arg4 ;
  size_t arg5 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2,arg3,arg4,arg5);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_3(void * jarg1, double jarg2, double jarg3, unsigned int jarg4) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::real arg3 ;
  bool arg4 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2,arg3,arg4);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_4(void * jarg1, double jarg2, double jarg3) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::real arg3 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Bisect__SWIG_5(void * jarg1, double jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  SwigValueWrapper< tinyspline::DeBoorNet > result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->bisect(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::DeBoorNet((const tinyspline::DeBoorNet &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TinySpline_BSpline_IsClosed__SWIG_0(void * jarg1, double jarg2) {
  unsigned int jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  bool result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = (bool)((tinyspline::BSpline const *)arg1)->isClosed(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TinySpline_BSpline_IsClosed__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  bool result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = (bool)((tinyspline::BSpline const *)arg1)->isClosed();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TinySpline_BSpline_ToJson(void * jarg1) {
  char * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::string result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->toJson();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_BSpline_Save(void * jarg1, char * jarg2) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::string arg2 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign(jarg2); 
  {
    try {
      ((tinyspline::BSpline const *)arg1)->save(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_BSpline_SetControlPointAt(void * jarg1, unsigned long jarg2, void * jarg3) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  std::vector< tinyspline::real > *arg3 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::vector< tinyspline::real > *)jarg3; 
  {
    try {
      (arg1)->setControlPointAt(arg2,(std::vector< tinyspline::real > const *)arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_BSpline_SetKnotAt(void * jarg1, unsigned long jarg2, double jarg3) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  tinyspline::real arg3 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  {
    try {
      (arg1)->setKnotAt(arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_InsertKnot(void * jarg1, double jarg2, unsigned long jarg3) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  size_t arg3 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->insertKnot(arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Split(void * jarg1, double jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->split(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Tension(void * jarg1, double jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::real arg2 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->tension(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_ToBeziers(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->toBeziers();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Derive__SWIG_0(void * jarg1, unsigned long jarg2, double jarg3) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  tinyspline::real arg3 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (tinyspline::real)jarg3; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->derive(arg2,arg3);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Derive__SWIG_1(void * jarg1, unsigned long jarg2) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t arg2 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->derive(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Derive__SWIG_2(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::BSpline result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->derive();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new tinyspline::BSpline((const tinyspline::BSpline &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TinySpline_BSpline_ToString(void * jarg1) {
  char * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::string result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = ((tinyspline::BSpline const *)arg1)->toString();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_BSpline_Degree_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = tinyspline_BSpline_degree_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_BSpline_Order_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = tinyspline_BSpline_order_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_BSpline_Dimension_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = tinyspline_BSpline_dimension_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_BSpline_NumControlPoints_get(void * jarg1) {
  unsigned long jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  size_t result;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = tinyspline_BSpline_numControlPoints_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Domain_get(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  tinyspline::Domain *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = (tinyspline::Domain *)tinyspline_BSpline_domain_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_BSpline_ControlPoints_set(void * jarg1, void * jarg2) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *arg2 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (std::vector< tinyspline::real > *)jarg2; 
  {
    try {
      tinyspline_BSpline_controlPoints_set(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_ControlPoints_get(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = (std::vector< tinyspline::real > *)tinyspline_BSpline_controlPoints_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_BSpline_Knots_set(void * jarg1, void * jarg2) {
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *arg2 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  arg2 = (std::vector< tinyspline::real > *)jarg2; 
  {
    try {
      tinyspline_BSpline_knots_set(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_BSpline_Knots_get(void * jarg1) {
  void * jresult ;
  tinyspline::BSpline *arg1 = (tinyspline::BSpline *) 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (tinyspline::BSpline *)jarg1; 
  {
    try {
      result = (std::vector< tinyspline::real > *)tinyspline_BSpline_knots_get(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TinySpline_Utils_KnotsEqual(double jarg1, double jarg2) {
  unsigned int jresult ;
  tinyspline::real arg1 ;
  tinyspline::real arg2 ;
  bool result;
  
  arg1 = (tinyspline::real)jarg1; 
  arg2 = (tinyspline::real)jarg2; 
  {
    try {
      result = (bool)tinyspline::Utils::knotsEqual(arg1,arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_delete_Utils(void * jarg1) {
  tinyspline::Utils *arg1 = (tinyspline::Utils *) 0 ;
  
  arg1 = (tinyspline::Utils *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_Clear(void * jarg1) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  {
    try {
      (arg1)->clear();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_Add(void * jarg1, double jarg2) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      (arg1)->push_back((double const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_RealVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  {
    try {
      result = ((std::vector< tinyspline::real > const *)arg1)->size();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TinySpline_RealVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  {
    try {
      result = ((std::vector< tinyspline::real > const *)arg1)->capacity();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  {
    try {
      (arg1)->reserve(arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_Vector__SWIG_0() {
  void * jresult ;
  std::vector< tinyspline::real > *result = 0 ;
  
  {
    try {
      result = (std::vector< tinyspline::real > *)new std::vector< tinyspline::real >();
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_Vector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = 0 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< tinyspline::real > const & type is null", 0);
    return 0;
  } 
  {
    try {
      result = (std::vector< tinyspline::real > *)new std::vector< tinyspline::real >((std::vector< tinyspline::real > const &)*arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_new_Vector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< tinyspline::real > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try {
      try {
        result = (std::vector< tinyspline::real > *)new_std_vector_Sl_tinyspline_real_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_RealVector_getitemcopy(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (double)std_vector_Sl_tinyspline_real_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TinySpline_RealVector_getitem(void * jarg1, int jarg2) {
  double jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double >::value_type *) &std_vector_Sl_tinyspline_real_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_setitem(void * jarg1, int jarg2, double jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__setitem(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (std::vector< double > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  {
    try {
      std_vector_Sl_tinyspline_real_Sg__AddRange(arg1,(std::vector< double > const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_RealVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< double > *result = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_tinyspline_real_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_Insert(void * jarg1, int jarg2, double jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__Insert(arg1,arg2,(double const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__InsertRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TinySpline_RealVector_Repeat(double jarg1, int jarg2) {
  void * jresult ;
  double *arg1 = 0 ;
  int arg2 ;
  double temp1 ;
  std::vector< double > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try {
      try {
        result = (std::vector< double > *)std_vector_Sl_tinyspline_real_Sg__Repeat((double const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  {
    try {
      std_vector_Sl_tinyspline_real_Sg__Reverse__SWIG_0(arg1);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_RealVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  int arg2 ;
  std::vector< double > *arg3 = 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< double > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< double > const & type is null", 0);
    return ;
  } 
  {
    try {
      try {
        std_vector_Sl_tinyspline_real_Sg__SetRange(arg1,arg2,(std::vector< double > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TinySpline_RealVector_Contains(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_tinyspline_real_Sg__Contains(arg1,(double const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_RealVector_IndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_tinyspline_real_Sg__IndexOf(arg1,(double const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TinySpline_RealVector_LastIndexOf(void * jarg1, double jarg2) {
  int jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  int result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (int)std_vector_Sl_tinyspline_real_Sg__LastIndexOf(arg1,(double const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TinySpline_RealVector_Remove(void * jarg1, double jarg2) {
  unsigned int jresult ;
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  bool result;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  temp2 = (double)jarg2; 
  arg2 = &temp2; 
  {
    try {
      result = (bool)std_vector_Sl_tinyspline_real_Sg__Remove(arg1,(double const &)*arg2);
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return 0; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TinySpline_delete_RealVector(void * jarg1) {
  std::vector< tinyspline::real > *arg1 = (std::vector< tinyspline::real > *) 0 ;
  
  arg1 = (std::vector< tinyspline::real > *)jarg1; 
  {
    try {
      delete arg1;
    } catch (const std::out_of_range& e) {
      {
        SWIG_CSharpException(SWIG_IndexError, e.what()); return ; 
      };
    } catch (const std::runtime_error& e) {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


#ifdef __cplusplus
}
#endif

