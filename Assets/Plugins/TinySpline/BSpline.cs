//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace TinySpline {

public class BSpline : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BSpline(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BSpline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BSpline() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tinysplinecsharpPINVOKE.delete_BSpline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public BSpline() : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_0(), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline(BSpline other) : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_1(BSpline.getCPtr(other)), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline(uint numControlPoints, uint dimension, uint degree, BSplineType type) : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_2(numControlPoints, dimension, degree, (int)type), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline(uint numControlPoints, uint dimension, uint degree) : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_3(numControlPoints, dimension, degree), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline(uint numControlPoints, uint dimension) : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_4(numControlPoints, dimension), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline(uint numControlPoints) : this(tinysplinecsharpPINVOKE.new_BSpline__SWIG_5(numControlPoints), true) {
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public static BSpline InterpolateCubicNatural(System.Collections.Generic.IList<double> points, uint dimension) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCubicNatural(RealVector.getCPtr(new RealVector(points)), dimension), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline InterpolateCatmullRom(System.Collections.Generic.IList<double> points, uint dimension, double alpha, System.Collections.Generic.IList<double> first, System.Collections.Generic.IList<double> last, double epsilon) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCatmullRom__SWIG_0(RealVector.getCPtr(new RealVector(points)), dimension, alpha, RealVector.getCPtr(new RealVector(first)), RealVector.getCPtr(new RealVector(last)), epsilon), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline InterpolateCatmullRom(System.Collections.Generic.IList<double> points, uint dimension, double alpha, System.Collections.Generic.IList<double> first, System.Collections.Generic.IList<double> last) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCatmullRom__SWIG_1(RealVector.getCPtr(new RealVector(points)), dimension, alpha, RealVector.getCPtr(new RealVector(first)), RealVector.getCPtr(new RealVector(last))), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline InterpolateCatmullRom(System.Collections.Generic.IList<double> points, uint dimension, double alpha, System.Collections.Generic.IList<double> first) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCatmullRom__SWIG_2(RealVector.getCPtr(new RealVector(points)), dimension, alpha, RealVector.getCPtr(new RealVector(first))), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline InterpolateCatmullRom(System.Collections.Generic.IList<double> points, uint dimension, double alpha) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCatmullRom__SWIG_3(RealVector.getCPtr(new RealVector(points)), dimension, alpha), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline InterpolateCatmullRom(System.Collections.Generic.IList<double> points, uint dimension) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InterpolateCatmullRom__SWIG_4(RealVector.getCPtr(new RealVector(points)), dimension), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline FromJson(string json) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_FromJson(json), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BSpline Load(string path) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Load(path), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.Collections.Generic.IList<double> ControlPointAt(uint index) {
    global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_ControlPointAt(swigCPtr, index);
    RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double KnotAt(uint index) {
    double ret = tinysplinecsharpPINVOKE.BSpline_KnotAt(swigCPtr, index);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Eval(double u) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Eval(swigCPtr, u), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.Collections.Generic.IList<double> EvalAll(System.Collections.Generic.IList<double> us) {
    global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_EvalAll(swigCPtr, RealVector.getCPtr(new RealVector(us)));
    RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.Collections.Generic.IList<double> Sample(uint num) {
    global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_Sample__SWIG_0(swigCPtr, num);
    RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public System.Collections.Generic.IList<double> Sample() {
    global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_Sample__SWIG_1(swigCPtr);
    RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value, double epsilon, bool persnickety, uint index, bool ascending, uint maxIter) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_0(swigCPtr, value, epsilon, persnickety, index, ascending, maxIter), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value, double epsilon, bool persnickety, uint index, bool ascending) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_1(swigCPtr, value, epsilon, persnickety, index, ascending), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value, double epsilon, bool persnickety, uint index) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_2(swigCPtr, value, epsilon, persnickety, index), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value, double epsilon, bool persnickety) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_3(swigCPtr, value, epsilon, persnickety), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value, double epsilon) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_4(swigCPtr, value, epsilon), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DeBoorNet Bisect(double value) {
    DeBoorNet ret = new DeBoorNet(tinysplinecsharpPINVOKE.BSpline_Bisect__SWIG_5(swigCPtr, value), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsClosed(double epsilon) {
    bool ret = tinysplinecsharpPINVOKE.BSpline_IsClosed__SWIG_0(swigCPtr, epsilon);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsClosed() {
    bool ret = tinysplinecsharpPINVOKE.BSpline_IsClosed__SWIG_1(swigCPtr);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string ToJson() {
    string ret = tinysplinecsharpPINVOKE.BSpline_ToJson(swigCPtr);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Save(string path) {
    tinysplinecsharpPINVOKE.BSpline_Save(swigCPtr, path);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetControlPointAt(uint index, System.Collections.Generic.IList<double> ctrlp) {
    tinysplinecsharpPINVOKE.BSpline_SetControlPointAt(swigCPtr, index, RealVector.getCPtr(new RealVector(ctrlp)));
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetKnotAt(uint index, double knot) {
    tinysplinecsharpPINVOKE.BSpline_SetKnotAt(swigCPtr, index, knot);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
  }

  public BSpline InsertKnot(double u, uint n) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_InsertKnot(swigCPtr, u, n), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline Split(double u) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Split(swigCPtr, u), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline Tension(double tension) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Tension(swigCPtr, tension), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline ToBeziers() {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_ToBeziers(swigCPtr), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline Derive(uint n, double epsilon) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Derive__SWIG_0(swigCPtr, n, epsilon), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline Derive(uint n) {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Derive__SWIG_1(swigCPtr, n), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BSpline Derive() {
    BSpline ret = new BSpline(tinysplinecsharpPINVOKE.BSpline_Derive__SWIG_2(swigCPtr), true);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override string ToString() {
    string ret = tinysplinecsharpPINVOKE.BSpline_ToString(swigCPtr);
    if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint Degree {
    get {
      uint ret = tinysplinecsharpPINVOKE.BSpline_Degree_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint Order {
    get {
      uint ret = tinysplinecsharpPINVOKE.BSpline_Order_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint Dimension {
    get {
      uint ret = tinysplinecsharpPINVOKE.BSpline_Dimension_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public uint NumControlPoints {
    get {
      uint ret = tinysplinecsharpPINVOKE.BSpline_NumControlPoints_get(swigCPtr);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Domain Domain {
    get {
      global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_Domain_get(swigCPtr);
      Domain ret = (cPtr == global::System.IntPtr.Zero) ? null : new Domain(cPtr, true);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public System.Collections.Generic.IList<double> ControlPoints {
    set {
      tinysplinecsharpPINVOKE.BSpline_ControlPoints_set(swigCPtr, RealVector.getCPtr(new RealVector(value)));
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_ControlPoints_get(swigCPtr);
      RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public System.Collections.Generic.IList<double> Knots {
    set {
      tinysplinecsharpPINVOKE.BSpline_Knots_set(swigCPtr, RealVector.getCPtr(new RealVector(value)));
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = tinysplinecsharpPINVOKE.BSpline_Knots_get(swigCPtr);
      RealVector ret = (cPtr == global::System.IntPtr.Zero) ? null : new RealVector(cPtr, true);
      if (tinysplinecsharpPINVOKE.SWIGPendingException.Pending) throw tinysplinecsharpPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}

}
